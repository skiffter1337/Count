[{"/Users/ek/Documents/Count/src/index.tsx":"1","/Users/ek/Documents/Count/src/reportWebVitals.ts":"2","/Users/ek/Documents/Count/src/App.tsx":"3","/Users/ek/Documents/Count/src/Components/Button.tsx":"4","/Users/ek/Documents/Count/src/Components/Input.tsx":"5"},{"size":554,"mtime":1673006588256,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1673006588257,"results":"8","hashOfConfig":"7"},{"size":5469,"mtime":1673453440142,"results":"9","hashOfConfig":"7"},{"size":787,"mtime":1673445253513,"results":"10","hashOfConfig":"7"},{"size":736,"mtime":1673453215596,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hxpu8z",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ek/Documents/Count/src/index.tsx",[],[],"/Users/ek/Documents/Count/src/reportWebVitals.ts",[],[],"/Users/ek/Documents/Count/src/App.tsx",[],[],"/Users/ek/Documents/Count/src/Components/Button.tsx",["29"],[],"import React from 'react';\nimport s from './Button.module.css';\n\ntype ButtonType = {\n    onClick: ()=> void\n    color?: string\n    children?: React.ReactNode\n}\n\nconst Button:React.FC<ButtonType> = (props) => {\n\n    const {onClick, color, children} = props\n\n    const finalButtonClassName = `\n    ${s.button} \n    ${color === 'blue' ? s.blue : ''}\n    ${color === 'purple' ? s.purple : ''}\n    ${color === 'disabled' ? s.disabled : ''}\n    `\n\n    const callBackHandler = () => {\n        onClick()\n    }\n\n    return (\n        <div>\n            <button\n                onClick={callBackHandler}\n                className={finalButtonClassName}>{children}</button>\n        </div>\n    );\n};\n\nexport default Button;",[],"/Users/ek/Documents/Count/src/Components/Input.tsx",["30","31","32"],[],{"ruleId":"33","severity":1,"message":"34","line":13,"column":38,"nodeType":"35","messageId":"36","endLine":13,"endColumn":46},{"ruleId":"33","severity":1,"message":"37","line":1,"column":29,"nodeType":"35","messageId":"36","endLine":1,"endColumn":38},{"ruleId":"33","severity":1,"message":"38","line":12,"column":12,"nodeType":"35","messageId":"36","endLine":12,"endColumn":20},{"ruleId":"33","severity":1,"message":"39","line":12,"column":22,"nodeType":"35","messageId":"36","endLine":12,"endColumn":27},"@typescript-eslint/no-unused-vars","'disabled' is assigned a value but never used.","Identifier","unusedVar","'ReactNode' is defined but never used.","'onChange' is assigned a value but never used.","'value' is assigned a value but never used."]